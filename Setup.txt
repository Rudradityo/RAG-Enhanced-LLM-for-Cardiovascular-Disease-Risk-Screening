Kaggle Notebook Set Up
Follow below steps to set up Kaggle Notebook:
1.	Open and log in to Kaggle website (https://www.kaggle.com/)
2.	Create a new Kaggle Notebook
3.	Import IPython Notebook named cardiovascular-disease-risk-screening-t5 inside the newly created Kaggle notebook
The IPython Notebook named cardiovascular-disease-risk-screening-t5 is present under directory Kaggle Notebook.
4.	Ensure that dataset named cardiovascular-disease-dataset is visible in the right sidebar
5.	Ensure that Accelerator is set to GPU T4 x2 under Settings in top bar
6.	Set the name of Kaggle Notebook to cardiovascular-disease-risk-screening-t5

Local Application Directory Structure
•	Files under Local Application Directory
o	environment.yaml
o	app.py
o	api.py
o	rag_prompt.py
o	llm.py
o	load_check_chromadb.py
•	File under Local Application/rag_collection Directory
o	rag_cardiovascular_disease_risk.jsonl
•	File under Local Application/finetuning Directory
o	patient_case_cvd_status.jsonl
•	File under Local Application/finetuning/final_version Directory
o	fine_tuned.tar
•	Files under Local Application/finetuning/final_version/fine_tuned
o	added_tokens.json
o	config.json
o	generation_config.json
o	model.safetensors
o	special_tokens_map.json
o	spiece.model
o	tokenizer_config.json
o	training_args.bin





Local Application Setup
Prerequisites
Before proceeding below, ensure that both Anaconda Distribution and Docker Desktop are installed, and that Docker Desktop is in running state.
Steps
Follow below steps to set up Conda Environment and Application in Local:
1.	Open Anaconda Navigator
2.	Open Powershell Prompt
3.	In the opened Powershell Prompt, change to Local Application directory
cd 'Local Application' 
Ensure that your working directory is the extracted folder in Powershell Prompt.

4.	Create a new environment named rag_llm_cardiovascular_screening_application with required libraries using environment.yaml
conda env create --file environment.yaml

5.	Activate the newly created Conda environment
conda activate rag_llm_cardiovascular_screening_application

6.	Pull ChromaDB image
docker pull chromadb/chromadb:latest

7.	Start ChromaDB container using earlier pulled ChromaDB image
docker run -d -p 8001:8000 --name chromadb chromadb/chroma:latest

8.	Start FastAPI application
uvicorn api:app --host 0.0.0.0 --port 8000

9.	Start Streamlit application in a new Powershell prompt
streamlit run app.py --server.port 8501
After starting Streamlit application, the Streamlit application automatically opens in a new tab with URL (http://localhost:8501/) in your default web browser.
